name: day1-ci
on: { push: {}, pull_request: {} }
permissions:
  contents: read

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}/src   # <- important

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.10" }
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dev deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt -r requirements.txt
      - name: Lint (ruff)
        run: ruff check .
      - name: Format check (black)
        run: black --check .
      - name: Tests (pytest)
        run: pytest
         
  compose-smoke:
    runs-on: ubuntu-latest
    needs: build-test-lint
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - uses: actions/checkout@v4

      - name: Docker versions
        run: |
          docker --version
          docker compose version

      - name: Build ETL image (compose)
        run: docker compose build etl

      - name: Start only DB
        run: docker compose up -d db

      - name: Wait for DB healthy
        run: |
          for i in {1..60}; do
            docker compose exec -T db pg_isready -U postgres && exit 0
            sleep 1
          done
          echo "DB not ready in time"; exit 1

      - name: Run ETL (propagate exit code)
        run: docker compose up --no-deps --exit-code-from etl etl

      - name: Compose down (cleanup)
        if: always()
        run: docker compose down -v

  build-image:
    runs-on: ubuntu-latest
    needs: [build-test-lint, compose-smoke]
    steps:
      - uses: actions/checkout@v4
      - name: Build docker image
        run: docker build -t etl:ci .

  push-image:
    runs-on: ubuntu-latest
    needs: [build-test-lint, compose-smoke]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
